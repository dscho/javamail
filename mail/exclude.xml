<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010-2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- FindBugs exclude list for JavaMail -->

<FindBugsFilter>
    <!--
	There are a bunch of places where FindBugs complains about
	exposing internal representations.  We exclude cases where
	this only happens in internal classes that are never visible
	through the public JavaMail API, or cases where the user
	passes in an object (usually an array) and can only hurt
	themselves by modifying the array while a method is in progress,
	or where the implementation is passing the data back to the user
	(e.g., in an Exception) and never uses it again.
    -->
    <Match>
	<Or>
	    <Class name="com.sun.mail.iap.ByteArray"/>
	    <Class name="javax.mail.SendFailedException"/>
	    <Class name="javax.mail.event.MessageCountEvent"/>
	    <Class name="javax.mail.event.TransportEvent"/>
	</Or>
	<Or>
	    <Bug pattern="EI_EXPOSE_REP"/>
	    <Bug pattern="EI_EXPOSE_REP2"/>
	</Or>
    </Match>
    <Match>
	<Class name="com.sun.mail.smtp.SMTPTransport"/>
	<Method name="sendMessage"/>
	<!-- passed in Address array -->
	<Bug pattern="EI_EXPOSE_REP2"/>
    </Match>
    <Match>
	<Class name="javax.mail.internet.MimeBodyPart"/>
	<Method name="&lt;init&gt;"/> <!-- match constructor -->
	<!-- passed in byte array -->
	<Bug pattern="EI_EXPOSE_REP2"/>
    </Match>
    <Match>
	<Class name="javax.mail.util.ByteArrayDataSource"/>
	<Method name="&lt;init&gt;"/> <!-- match constructor -->
	<!-- passed in byte array -->
	<Bug pattern="EI_EXPOSE_REP2"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.util.MailSSLSocketFactory"/>
	<Method name="setTrustManagers"/>
	<!-- passed in TrustManager array -->
	<Bug pattern="EI_EXPOSE_REP2"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.util.MailSSLSocketFactory"/>
	<Method name="getTrustManagers"/>
	<!-- returned TrustManager array -->
	<Bug pattern="EI_EXPOSE_REP"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.imap.protocol.INTERNALDATE"/>
	<Method name="getDate"/>
	<!--
	    Returned Date object; it's only ever stored in
	    IMAPMessage.receivedDate and is always used to
	    construct a new Date object before returning to
	    users.
	-->
	<Bug pattern="EI_EXPOSE_REP"/>
    </Match>

    <!--
	A few places where it complains about wait not being in a loop.
	This purposely doesn't loop so that the application
	calling idle can check whether the idle should continue.
    -->
    <Match>
	<!-- an anonymous inner class of the idle method -->
	<Class name="~com\.sun\.mail\.imap\.IMAPFolder.*"/>
	<Method name="doCommand"/>
	<Bug pattern="WA_NOT_IN_LOOP"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.imap.IMAPStore"/>
	<Method name="idle"/>
	<Bug pattern="WA_NOT_IN_LOOP"/>
    </Match>

    <!--
	A few places where we catch Exception even though it's not
	explicitly thrown.  We need to make sure that if anything
	goes wrong we clean things up.  Perhaps these should be
	converted to a finally block and a boolean "success" flag?
    -->
    <Match>
	<Class name="com.sun.mail.imap.IMAPStore"/>
	<Method name="getProtocol"/>
	<Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.imap.IMAPStore"/>
	<Method name="getStoreProtocol"/>
	<Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.imap.protocol.IMAPSaslAuthenticator"/>
	<Method name="authenticate"/>
	<Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.pop3.POP3Folder"/>
	<Method name="createMessage"/>
	<Or>
	    <Bug pattern="REC_CATCH_EXCEPTION"/>
	    <Bug pattern="DE_MIGHT_IGNORE"/>
	</Or>
    </Match>
    <Match>
	<Class name="com.sun.mail.util.SocketFetcher"/>
	<Method name="startTLS"/>
	<Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>
    <Match>
	<Class name="javax.mail.Session"/>
	<Method name="loadAllResources"/>
	<Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>

    <!--
	FindBugs complains about a possible double check of headersLoaded,
	but it seems to be just wrong; I don't see it.
    -->
    <Match>
	<Class name="com.sun.mail.imap.IMAPMessage"/>
	<Method name="loadHeaders"/>
	<Bug pattern="DC_DOUBLECHECK"/>
    </Match>

    <!--
	These IMAP-specific subclasses of standard classes don't override
	equals because all they add are constructors and optimized access
	methods; everything else, including the way to test for equality,
	is the same.
    -->
    <Match>
	<Class name="com.sun.mail.imap.protocol.FLAGS"/>
	<Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS"/>
    </Match>
    <Match>
	<Class name="com.sun.mail.imap.protocol.IMAPAddress"/>
	<!-- defined in ENVELOPE.java -->
	<Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS"/>
    </Match>

    <!--
	FindBugs complains of an unitialized read of the "capabilities"
	field.  Since the superclass might initialize the field (via a
	call into the overridden processGreeting method), any initialization
	done in the IMAPProtocol class will undo any initialization done
	as a side effect of calling the superclass constructor.  Thus, we
	need to depend on the field being initialized to the default value.
    -->
    <Match>
	<Class name="com.sun.mail.imap.protocol.IMAPProtocol"/>
	<Method name="&lt;init&gt;"/> <!-- match constructor -->
	<Bug pattern="UR_UNINIT_READ"/>
    </Match>

    <!--
	This use of string concatenation only occurs when creating a
	string for an error message in an exception.  The simpler code
	is better here; performance is not an issue.
    -->
    <Match>
	<Class name="com.sun.mail.util.BASE64DecoderStream"/>
	<Method name="recentChars"/>
	<Bug pattern="SBSC_USE_STRINGBUFFER_CONCATENATION"/>
    </Match>

    <!--
	Yes, the "next" element in my linked list isn't ever actually
	used, but it feels weird to only have a "prev" element.
    -->
    <Match>
	<Class name="javax.mail.EventQueue$QueueElement"/>
	<Field name="next"/>
	<Bug pattern="URF_UNREAD_FIELD"/>
    </Match>

    <!--
	Stupid Serializable EventObject class causes FindBugs to complain
	about transient fields in subclasses.  I don't know why it's
	complaining about these fields but not others, but since I don't
	really expect anyone to serialize these events I'm just ignoring
	this complaint.
    -->
    <Match>
	<Class name="javax.mail.event.TransportEvent"/>
	<Or>
	    <Field name="invalid"/>
	    <Field name="validSent"/>
	    <Field name="validUnsent"/>
	</Or>
	<Bug pattern="SE_TRANSIENT_FIELD_NOT_RESTORED"/>
    </Match>

    <!--
	This string comparison using == is just an optimization.
    -->
    <Match>
	<Class name="javax.mail.internet.InternetAddress"/>
	<Method name="equals"/>
	<Bug pattern="ES_COMPARING_STRINGS_WITH_EQ"/>
    </Match>

    <!--
	This string comparison using == is to determine whether the
	String object is a different String object.
    -->
    <Match>
	<Class name="javax.mail.internet.MimeUtility"/>
	<Method name="decodeText"/>
	<Bug pattern="ES_COMPARING_STRINGS_WITH_EQ"/>
    </Match>

    <!--
	ByteArrayInputStream.available guarantees to return the full number
	of bytes left in the buffer, and ByteArrayInputStream.read guarantees
	to read all the bytes, so we don't really need to check the return
	value.  Ignore this complaint.
    -->
    <Match>
	<Class name="com.sun.mail.util.ASCIIUtility"/>
	<Method name="getBytes"/>
	<Bug pattern="DLS_DEAD_LOCAL_STORE"/>
    </Match>

    <!--
	We extract the "lang" field of an encoded string but we don't
	currently do anything with it.  Ignore this complaint.
    -->
    <Match>
	<Class name="javax.mail.internet.ParameterList"/>
	<Method name="decodeValue"/>
	<Bug pattern="DLS_DEAD_LOCAL_STORE"/>
    </Match>

    <!--
	The call ParameterList.set(null, "DONE") is a kludge used by the
	IMAP provider to indicate that it's done setting parameters.
	In other cases we *want* a null name to cause a NullPointerException.
    -->
    <Match>
	<Class name="javax.mail.internet.ParameterList"/>
	<Method name="set"/>
	<Bug pattern="NP_NULL_ON_SOME_PATH"/>
    </Match>

    <!--
	We purposely don't close these streams, which are just wrappers
	around the original stream that needs to remain open.
    -->
    <Match>
	<Class name="javax.mail.internet.MimeMultipart"/>
	<Or>
	    <Method name="parse"/>
	    <Method name="parsebm"/>
	</Or>
	<Bug pattern="OS_OPEN_STREAM"/>
    </Match>

    <!--
	When deleting the temp file fails, there's really nothing to be done.
    -->
    <Match>
	<Class name="com.sun.mail.pop3.TempFile"/>
	<Method name="close"/>
	<Bug pattern="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"/>
    </Match>

    <!--
	In IMAPFolder.close, I believe the protocol field can be set to null
	as a result of a protocol error that invokes a callback that calls
	cleanup, thus I don't believe these null checks are redundant.
    -->
    <Match>
	<Class name="com.sun.mail.imap.IMAPFolder"/>
	<Method name="close"/>
	<Bug pattern="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"/>
    </Match>

    <!--
	Can't fix these errors in toString until JavaMail 1.5 because
	it's part of the spec.  Sigh.
    -->
    <Match>
	<Or>
	    <Class name="javax.mail.internet.ContentDisposition"/>
	    <Class name="javax.mail.internet.ContentType"/>
	</Or>
	<Method name="toString"/>
	<Bug pattern="NP_TOSTRING_COULD_RETURN_NULL"/>
    </Match>

    <!--
	IMAPFolder.uidTable is only ever manipulated when the
	messageCacheLock is held, but FindBugs can't figure that out.
    -->
    <Match>
	<Class name="com.sun.mail.imap.IMAPFolder"/>
	<Field name="uidTable"/>
	<Bug pattern="IS2_INCONSISTENT_SYNC"/>
    </Match>

    <!--
	IMAPFolder.doExpungeNotification is only ever manipulated when the
	messageCacheLock is held, but FindBugs can't figure that out.
    -->
    <Match>
	<Class name="com.sun.mail.imap.IMAPFolder"/>
	<Field name="doExpungeNotification"/>
	<Bug pattern="IS2_INCONSISTENT_SYNC"/>
    </Match>

    <!--
	The static mailDateFormat field is only used to access the parse
	method, which is known to be thread safe, so we can ignore this error.
    -->
    <Match>
	<Class name="com.sun.mail.imap.protocol.INTERNALDATE"/>
	<Bug pattern="STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE"/>
    </Match>

    <!--
	These errors are in code imported from the JDK, where it seems
	to be purposely using the platform default encoding.  It's safer
	to just leave this alone and ignore the errors.
    -->
    <Match>
	<Class name="javax.mail.URLName"/>
	<Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>

    <!--
	We're purposely using the platform default encoding because
	we're trying to discover what the platform default encoding *is*!
    -->
    <Match>
	<Class name="javax.mail.internet.MimeUtility"/>
	<Method name="getDefaultJavaCharset"/>
	<Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>

    <!--
	We're purposely using the platform default encoding when a
	charset hasn't been specified.
    -->
    <Match>
	<Class name="javax.mail.internet.ParameterList"/>
	<Method name="combineMultisegmentNames"/>
	<Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>

    <!--
	We're purposely using the platform default encoding because
	we're converting bytes that were written using the platform
	default encoding back to a String.
    -->
    <Match>
	<Class name="com.sun.mail.util.LogOutputStream"/>
	<Method name="logBuf"/>
	<Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>

    <!--
	MimeBodyPart.headers is set in the constructor.  IMAPBodyPart has
	perhaps paranoid defensive code to set it if it's not set.  That
	code is protected by the object lock, but all of the reads of the
	field are not, thus FindBugs complains.  For now I think it's
	better to leave the defensive code in and ignore this error.
    -->
    <Match>
	<Class name="javax.mail.internet.MimeBodyPart"/>
	<Field name="headers"/>
	<Bug pattern="IS2_INCONSISTENT_SYNC"/>
    </Match>

</FindBugsFilter>
